// <auto-generated />
using System;
using LiftTracker.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiftTracker.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230513172932_InitialStructure")]
    partial class InitialStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LiftTracker.Server.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingDayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.PlannedSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("WeekTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTemplateId1")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTemplateId2")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTemplateId3")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTemplateId4")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTemplateId5")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTemplateId6")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeekTemplateId");

                    b.HasIndex("WeekTemplateId1");

                    b.HasIndex("WeekTemplateId2");

                    b.HasIndex("WeekTemplateId3");

                    b.HasIndex("WeekTemplateId4");

                    b.HasIndex("WeekTemplateId5");

                    b.HasIndex("WeekTemplateId6");

                    b.ToTable("PlannedSessions");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.PlannedSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("PlannedSessionId")
                        .HasColumnType("int");

                    b.Property<int>("TargetMaxRep")
                        .HasColumnType("int");

                    b.Property<int>("TargetMinRep")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("PlannedSessionId");

                    b.ToTable("PlannedSets");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("SessionId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.WeekTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("WeekTemplates");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Plan", b =>
                {
                    b.HasOne("LiftTracker.Server.Models.User", "User")
                        .WithMany("Plans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.PlannedSession", b =>
                {
                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day1")
                        .HasForeignKey("WeekTemplateId");

                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day2")
                        .HasForeignKey("WeekTemplateId1");

                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day3")
                        .HasForeignKey("WeekTemplateId2");

                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day4")
                        .HasForeignKey("WeekTemplateId3");

                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day5")
                        .HasForeignKey("WeekTemplateId4");

                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day6")
                        .HasForeignKey("WeekTemplateId5");

                    b.HasOne("LiftTracker.Server.Models.WeekTemplate", null)
                        .WithMany("Day7")
                        .HasForeignKey("WeekTemplateId6");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.PlannedSet", b =>
                {
                    b.HasOne("LiftTracker.Server.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftTracker.Server.Models.PlannedSession", null)
                        .WithMany("PlannedSets")
                        .HasForeignKey("PlannedSessionId");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Session", b =>
                {
                    b.HasOne("LiftTracker.Server.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Set", b =>
                {
                    b.HasOne("LiftTracker.Server.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftTracker.Server.Models.Session", "Session")
                        .WithMany("Sets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.WeekTemplate", b =>
                {
                    b.HasOne("LiftTracker.Server.Models.Plan", null)
                        .WithMany("Weeks")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Plan", b =>
                {
                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.PlannedSession", b =>
                {
                    b.Navigation("PlannedSets");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.Session", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.User", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("LiftTracker.Server.Models.WeekTemplate", b =>
                {
                    b.Navigation("Day1");

                    b.Navigation("Day2");

                    b.Navigation("Day3");

                    b.Navigation("Day4");

                    b.Navigation("Day5");

                    b.Navigation("Day6");

                    b.Navigation("Day7");
                });
#pragma warning restore 612, 618
        }
    }
}
